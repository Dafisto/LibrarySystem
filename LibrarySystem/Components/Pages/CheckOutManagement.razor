@page "/CheckOutManager"
@inject ClientTable clients
@inject LibraryDB Connection
@inject BookTable books
@inject CheckoutTable Checkouts
@using LibrarySystem.ClassPackage.Domain
@using LibrarySystem.ClassPackage.Persistence


<h1>Book Checkout/Checkin</h1>

<p>"Checkout or return a book"</p>


<label>
    Borrow ID:
    <InputText @bind-Value="holdingValue" readonly />
</label>

<label>
    Customer ID:
    <InputText @bind-Value="customerIDinput"/>
</label>

<label>
    ISBN:
    <InputText @bind-Value="isbnInput" />
</label>

<button class="btn btn-primary" @onclick="InsertCheckout">Borrow Book</button>

<label>
    Search Client:
    <InputText @bind-Value="searchInput" />
</label>
<button class="btn btn-primary" @onclick="FindBorrow">Search for Clients</button>

<h2>Return Book</h2>

<label>
    Borrow ID:
    <InputText @bind-Value="holdingValue" />
</label>

<label>
    Customer ID:
    <InputText @bind-Value="customerIDinputReturn" />
</label>

<label>
    ISBN:
    <InputText @bind-Value="isbnInput" readonly/>
</label>

<label>
    Borrow ID:
    <InputText @bind-Value="holdingValue" readonly />
</label>

<h2>Find Active Checkouts</h2>

<h1>Found Checkouts</h1>
<table>
    <thead>
        <tr>
            <th>Client ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>City</th>
        </tr>
    </thead>
    <tbody>
        
        @if (borrowList != null)
        {
           @foreach (var rental in borrowList)
            {
                <tr>
                    <td>@rental.rentalCode</td>
                    <td>@rental.customerID</td>
                    <td>@rental.isbn</td>                    
                    <td>                         
                        <button class="btn btn-sm btn-danger" @onclick="()=>DeleteBorrow(rental)">Delete Client</button> 
                    </td>
                </tr>
            }
        }
    </tbody>
</table>





@code 
{
    private string holdingValue = "Blank";
    private int randomBorrowID { get; set; } = 0;
    private string customerIDinput { get; set; } = string.Empty;
    private string isbnInput { get; set; } = string.Empty;
    private string cityInput { get; set; } = string.Empty;
    private string searchInput;
    private List<CheckoutTable> borrowList;
    private string errorMessage;
    private string customerIDinputReturn;


    protected override void OnInitialized()
    {        
        customerIDinput = "Empty";
        cityInput = "Empty";
        searchInput = "Any";
    }
    private void InsertCheckout()
    {
        CheckoutTable checkout = new CheckoutTable
            {
                rentalCode = randomBorrowID,
                customerID = Int32.Parse(customerIDinput),
                isbn = Int32.Parse(isbnInput),
            };
        Connection.InsertBookMark(checkout);
        customerIDinput = "Empty";
        isbnInput = "Empty";
    }

    private async Task FindBorrow()
    {
        borrowList = await Connection.GetAllBookMarksAsync();
    }
    private async Task DeleteBorrow(CheckoutTable bookMark) // method to delete an item
    {
        try
        {
            await Connection.DeleteBookMarkAsync(bookMark);
            borrowList = await Connection.GetAllBookMarksAsync();
        }
        catch (Exception ex) // error message if the item cannot be deleted
        {
            errorMessage = ex.Message;
        }

    }


    }